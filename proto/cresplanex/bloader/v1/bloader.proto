syntax = "proto3";

package cresplanex.bloader.v1;

import "cresplanex/bloader/v1/auth.proto";
import "cresplanex/bloader/v1/store.proto";
import "cresplanex/bloader/v1/target.proto";

service BloaderSlaveService {
    rpc Connect(ConnectRequest) returns (ConnectResponse);

    rpc SlaveCommand(SlaveCommandRequest) returns (SlaveCommandResponse);

    rpc CallExec(CallExecRequest) returns (stream CallExecResponse);

    rpc ReceiveChanelConnect(ReceiveChanelConnectRequest) returns (stream ReceiveChanelConnectResponse);

    rpc SendLoader(stream SendLoaderRequest) returns (SendLoaderResponse);

    rpc SendAuth(SendAuthRequest) returns (SendAuthResponse);

    rpc SendStoreData(SendStoreDataRequest) returns (SendStoreDataResponse);

    rpc SendTarget(SendTargetRequest) returns (SendTargetResponse);
}

message ConnectRequest {
    string environment = 1;
}

message ConnectResponse {
    string connection_id = 1;
}

message SlaveCommandRequest {
    string connection_id = 1;
    string loader_id = 2;
}

message SlaveCommandResponse {
    string command_id = 1;
}

message CallExecRequest {
    string connection_id = 1;
    string command_id = 2;
}

message CallExecResponse {
    string output_id = 1;
    CallExecOutputType output_type = 2;
    oneof output {
        CallExecOutputStringArray string_array = 3;
    }
}

enum CallExecOutputType {
    CALL_EXEC_OUTPUT_TYPE_UNSPECIFIED = 0;
    CALL_EXEC_OUTPUT_TYPE_STRING_ARRAY = 1;
}

message CallExecOutputStringArray {
    repeated string data = 1;
}

message ReceiveChanelConnectRequest {
    string connection_id = 1;
}

message ReceiveChanelConnectResponse {
    string request_id = 1;
    RequestType request_type = 2;
    oneof request {
        ReceiveChanelConnectLoaderResourceRequest loader_resource_request = 3;
        ReceiveChanelConnectAuthResourceRequest auth_resource_request = 4;
        ReceiveChanelConnectStore store = 5;
        ReceiveChanelConnectResourceStore resource_store = 6;
        ReceiveChanelConnectResourceTarget resource_target = 7;
        ReceiveChanelConnectTerminateCommand terminate_load = 8;
    }
}

enum RequestType {
    REQUEST_TYPE_UNSPECIFIED = 0;
    REQUEST_TYPE_REQUEST_RESOURCE_LOADER = 1;
    REQUEST_TYPE_REQUEST_RESOURCE_AUTH = 2;
    REQUEST_TYPE_STORE = 3;
    REQUEST_TYPE_REQUEST_RESOURCE_STORE = 4;
    REQUEST_TYPE_REQUEST_RESOURCE_TARGET = 5;
    REQUEST_TYPE_TERMINATE_LOAD = 6;
}

message ReceiveChanelConnectLoaderResourceRequest {
    string loader_id = 1;
}

message ReceiveChanelConnectAuthResourceRequest {
    string auth_id = 1;
}

message ReceiveChanelConnectStore {
    repeated StoreData store_data = 1;
}

message ReceiveChanelConnectResourceStore {
    repeated StoreImportRequest store_import_request = 1;
}

message ReceiveChanelConnectResourceTarget {
    string target_id = 1;
}

message ReceiveChanelConnectTerminateCommand {
    string command_id = 1;
    bool success = 2;
}

message SendLoaderRequest {
    string request_id = 1;
    string loader_id = 2;
    bytes content = 3;       
    bool is_last_chunk = 4;  
}

message SendLoaderResponse {
}

message SendAuthRequest {
    string request_id = 1;
    string auth_id = 2;
    Auth auth = 3;
}

message SendAuthResponse {
}

message SendStoreDataRequest {
    string request_id = 1;
    string bucket_id = 2;
    string store_key = 3;
    bytes data = 4;
}

message SendStoreDataResponse {
}

message SendTargetRequest {
    string request_id = 1;
    string target_id = 2;
    Target target = 3;
}

message SendTargetResponse {
}
