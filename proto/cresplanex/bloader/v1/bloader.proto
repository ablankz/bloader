syntax = "proto3";

package cresplanex.bloader.v1;

import "cresplanex/bloader/v1/auth.proto";
import "cresplanex/bloader/v1/store.proto";
import "cresplanex/bloader/v1/target.proto";
import "cresplanex/flex/v1/flex.proto";

service BloaderSlaveService {
    rpc Connect(ConnectRequest) returns (ConnectResponse);

    rpc Disconnect(DisconnectRequest) returns (DisconnectResponse);

    rpc SlaveCommand(SlaveCommandRequest) returns (SlaveCommandResponse);

    rpc CallExec(CallExecRequest) returns (stream CallExecResponse);

    rpc ReceiveChanelConnect(ReceiveChanelConnectRequest) returns (stream ReceiveChanelConnectResponse);

    rpc SendLoader(stream SendLoaderRequest) returns (SendLoaderResponse);

    rpc SendAuth(SendAuthRequest) returns (SendAuthResponse);

    rpc SendStoreData(SendStoreDataRequest) returns (SendStoreDataResponse);

    rpc SendStoreOk(SendStoreOkRequest) returns (SendStoreOkResponse);

    rpc SendTarget(SendTargetRequest) returns (SendTargetResponse);

    rpc ReceiveLoadTermChannel(ReceiveLoadTermChannelRequest) returns (ReceiveLoadTermChannelResponse);
}

message ConnectRequest {
    string environment = 1;
}

message ConnectResponse {
    string connection_id = 1;
}

message DisconnectRequest {
    string connection_id = 1;
}

message DisconnectResponse {
}

message SlaveCommandRequest {
    string connection_id = 1;
    string loader_id = 2;
    cresplanex.flex.v1.FlexMap default_store = 3;
    cresplanex.flex.v1.FlexMap default_thread_only_store = 4;
    string output_root = 5;
    cresplanex.flex.v1.FlexMap slave_values = 6;
}

message SlaveCommandResponse {
    string command_id = 1;
}

message CallExecRequest {
    string connection_id = 1;
    string command_id = 2;
}

message CallExecResponse {
    string output_id = 1;
    CallExecOutputType output_type = 2;
    oneof output {
        CallExecOutputHTTP output_http = 3;
    }
}

enum CallExecOutputType {
    CALL_EXEC_OUTPUT_TYPE_UNSPECIFIED = 0;
    CALL_EXEC_OUTPUT_TYPE_HTTP = 1;
}

message CallExecOutputHTTP {
    repeated string data = 1;
}

message ReceiveChanelConnectRequest {
    string connection_id = 1;
}

message ReceiveChanelConnectResponse {
    string request_id = 1;
    RequestType request_type = 2;
    oneof request {
        ReceiveChanelConnectLoaderResourceRequest loader_resource_request = 3;
        ReceiveChanelConnectAuthResourceRequest auth_resource_request = 4;
        ReceiveChanelConnectStore store = 5;
        ReceiveChanelConnectStoreResourceRequest store_resource_request = 6;
        ReceiveChanelConnectTargetResourceRequest target_resource_request = 7;
    }
}

enum RequestType {
    REQUEST_TYPE_UNSPECIFIED = 0;
    REQUEST_TYPE_REQUEST_RESOURCE_LOADER = 1;
    REQUEST_TYPE_REQUEST_RESOURCE_AUTH = 2;
    REQUEST_TYPE_STORE = 3;
    REQUEST_TYPE_REQUEST_RESOURCE_STORE = 4;
    REQUEST_TYPE_REQUEST_RESOURCE_TARGET = 5;
}

message ReceiveChanelConnectLoaderResourceRequest {
    string loader_id = 1;
}

message ReceiveChanelConnectAuthResourceRequest {
    string auth_id = 1;
    bool is_default = 2;
}

message ReceiveChanelConnectStore {
    repeated StoreData store_data = 1;
}

message ReceiveChanelConnectStoreResourceRequest {
    repeated StoreImportRequest store_import_request = 1;
}

message ReceiveChanelConnectTargetResourceRequest {
    string target_id = 1;
}

message SendLoaderRequest {
    string request_id = 1;
    string loader_id = 2;
    bytes content = 3;       
}

message SendLoaderResponse {
}

message SendAuthRequest {
    string request_id = 1;
    string auth_id = 2;
    Auth auth = 3;
    bool is_default = 4;
}

message SendAuthResponse {
}

message SendStoreDataRequest {
    string request_id = 1;
    repeated StoreExportData store_data = 2;
}

message SendStoreDataResponse {
}

message SendStoreOkRequest {
    string request_id = 1;
}

message SendStoreOkResponse {
}

message SendTargetRequest {
    string request_id = 1;
    string target_id = 2;
    Target target = 3;
}

message SendTargetResponse {
}

message ReceiveLoadTermChannelRequest {
    string connection_id = 1;
    string command_id = 2;
}

message ReceiveLoadTermChannelResponse {
    bool success = 1;
}